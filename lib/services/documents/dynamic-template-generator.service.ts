/**
 * Service de g√©n√©ration dynamique de templates
 * Utilise l'IA pour cr√©er des templates √† la vol√©e
 */

import { DocumentTemplate, TemplateField, ContentBlock } from '@/lib/types/document-templates';
import OpenAI from 'openai';

export class DynamicTemplateGeneratorService {
  private static openai: OpenAI | null = null;

  private static getOpenAI(): OpenAI {
    if (!this.openai) {
      const apiKey = process.env.OPENAI_API_KEY;
      if (!apiKey) {
        throw new Error('OPENAI_API_KEY not configured');
      }
      this.openai = new OpenAI({ apiKey });
    }
    return this.openai;
  }

  /**
   * G√©n√®re un template complet √† partir d'une demande utilisateur
   */
  static async generateTemplate(
    userInput: string,
    documentType: string,
    category: string
  ): Promise<DocumentTemplate> {
    try {
      const openai = this.getOpenAI();

      const systemPrompt = `Tu es un expert en r√©daction de documents administratifs et juridiques suisses.
Ton r√¥le est de cr√©er un template de document professionnel en JSON.

Le template doit contenir:
1. requiredFields: Liste des champs n√©cessaires (nom, pr√©nom, adresse, etc.)
2. contentBlocks: Blocs de contenu du document avec variables {{nom_variable}}

Types de champs disponibles:
- text: Texte simple
- date: Date (format ISO)
- email: Email
- phone: T√©l√©phone
- address: Adresse
- postal_code: Code postal
- select: Liste de choix

Types de blocs de contenu:
- address: Bloc d'adresse (exp√©diteur/destinataire)
- header: Titre/En-t√™te
- paragraph: Paragraphe de texte complet (pas de placeholder)
- signature: Bloc de signature
- list: Liste √† puces

Variables disponibles dans le contenu:
{{prenom}}, {{nom}}, {{adresse}}, {{npa}}, {{ville}}, {{email}}, {{telephone}}, {{date_envoi}}
Et toutes les variables des champs que tu d√©finis

R√àGLES CRITIQUES:
- NE CR√âE JAMAIS de champ "contenu_principal", "contenu_courrier", "objet", ou autres champs g√©n√©riques de contenu
- √âCRIS le texte complet directement dans les contentBlocks (paragraphes)
- L'objet et le contenu doivent √™tre √©crits EN DUR dans les contentBlocks, pas demand√©s √† l'utilisateur
- Utilise le format suisse (vouvoiement, formules de politesse)
- Sois professionnel et respectueux des normes juridiques
- Inclus les r√©f√©rences l√©gales suisses pertinentes
- Le document doit √™tre complet et pr√™t √† l'envoi
- Les paragraphes doivent contenir le texte complet r√©el, PAS de variables {{contenu_principal}} ou {{objet}}

Retourne UNIQUEMENT un JSON valide (sans markdown) avec cette structure:
{
  "id": "nom-du-document",
  "type": "type_document",
  "category": "categorie",
  "title": "Titre du document",
  "description": "Description courte",
  "requiredFields": [
    {
      "key": "nom_variable",
      "label": "Label affich√©",
      "type": "text|date|email|etc",
      "required": true,
      "source": "manual_input",
      "placeholder": "Exemple de valeur",
      "helpText": "Aide pour l'utilisateur"
    }
  ],
  "contentBlocks": [
    {
      "type": "address",
      "content": "{{prenom}} {{nom}}\\n{{adresse}}\\n{{npa}} {{ville}}",
      "style": { "align": "left" }
    },
    {
      "type": "paragraph",
      "content": "Contenu avec {{variables}}"
    },
    {
      "type": "signature",
      "content": "{{prenom}} {{nom}}\\n\\n_________________________\\nSignature"
    }
  ],
  "metadata": {
    "language": "fr",
    "legalCompliance": true,
    "swissLawReference": "R√©f√©rence l√©gale si applicable"
  }
}`;

      const userPrompt = `Demande de l'utilisateur: "${userInput}"
Type de document: ${documentType}
Cat√©gorie: ${category}

üö® ATTENTION: TU DOIS √âCRIRE LE CONTENU COMPLET DU DOCUMENT, PAS DES PLACEHOLDERS ! üö®

‚ùå MAUVAIS EXEMPLE (√Ä NE JAMAIS FAIRE):
{
  "contentBlocks": [
    {"type": "header", "content": "Objet: [OBJET]"},
    {"type": "paragraph", "content": "Madame, Monsieur,"},
    {"type": "paragraph", "content": "[CONTENU_PRINCIPAL]"},
    {"type": "paragraph", "content": "Je vous prie d'agr√©er..."}
  ]
}

‚úÖ BON EXEMPLE (CE QU'IL FAUT FAIRE - r√©siliation assurance maladie):
{
  "contentBlocks": [
    {"type": "header", "content": "Objet: R√©siliation de contrat d'assurance maladie de base", "style": {"bold": true}},
    {"type": "paragraph", "content": "Madame, Monsieur,"},
    {"type": "paragraph", "content": "Par la pr√©sente, je vous informe de ma d√©cision de r√©silier mon contrat d'assurance maladie de base num√©ro {{numero_police}} aupr√®s de votre √©tablissement, avec effet au {{date_resiliation}}, conform√©ment aux dispositions de la Loi f√©d√©rale sur l'assurance-maladie (LAMal, Art. 7)."},
    {"type": "paragraph", "content": "Je vous prie de bien vouloir m'adresser une confirmation √©crite de cette r√©siliation dans les meilleurs d√©lais, ainsi que le d√©compte final de mes cotisations."},
    {"type": "paragraph", "content": "Je vous remercie de votre compr√©hension et vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es."}
  ]
}

‚úÖ AUTRE BON EXEMPLE (r√©clamation retard paiement):
{
  "contentBlocks": [
    {"type": "header", "content": "Objet: R√©clamation pour retard de paiement - Facture N¬∞ {{numero_facture}}", "style": {"bold": true}},
    {"type": "paragraph", "content": "Madame, Monsieur,"},
    {"type": "paragraph", "content": "Je me permets de vous contacter concernant la facture N¬∞ {{numero_facture}} d'un montant de {{montant_facture}} CHF, √©mise le {{date_facture}}, dont le r√®glement devait intervenir dans un d√©lai de {{delai_paiement}} jours."},
    {"type": "paragraph", "content": "√Ä ce jour, malgr√© l'expiration du d√©lai de paiement convenu, je n'ai pas re√ßu le r√®glement de cette facture. Cette situation m'oblige √† vous adresser une mise en demeure formelle."},
    {"type": "paragraph", "content": "Je vous prie donc de bien vouloir proc√©der au r√®glement de cette facture dans un d√©lai de 10 jours √† compter de la r√©ception de ce courrier, faute de quoi je me verrais contraint d'entreprendre les d√©marches juridiques n√©cessaires."},
    {"type": "paragraph", "content": "Je vous remercie de votre compr√©hension et reste √† votre disposition pour tout renseignement compl√©mentaire."},
    {"type": "paragraph", "content": "Je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es."}
  ]
}

MAINTENANT, POUR LA DEMANDE "${userInput}", TU DOIS:

1. Identifier le TYPE de document (r√©siliation, r√©clamation, demande, etc.)
2. R√©diger un OBJET SP√âCIFIQUE et complet (pas un placeholder)
3. R√©diger des PARAGRAPHES COMPLETS avec le contenu r√©el professionnel
4. Utiliser {{variables}} UNIQUEMENT pour les donn√©es qui changent (num√©ros, montants, dates, noms)
5. Respecter le style formel suisse (vouvoiement, formules de politesse)

R√àGLES ABSOLUES:
‚úÖ L'objet doit √™tre √©crit en toutes lettres: "Objet: R√©siliation de..." pas "Objet: {{objet}}"
‚úÖ Les paragraphes doivent contenir le texte complet, pas [CONTENU_PRINCIPAL] ou {{contenu_principal}}
‚úÖ Cr√©er des champs sp√©cifiques: numero_police, date_resiliation, montant_facture, etc.
‚ùå INTERDICTION TOTALE d'utiliser: [OBJET], [CONTENU_PRINCIPAL], {{objet}}, {{contenu_principal}}, {{contenu_courrier}}

G√âN√àRE UN DOCUMENT COMPLET MAINTENANT !`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.9, // Augment√© pour plus de cr√©ativit√©
        max_tokens: 3000, // Augment√© pour contenu plus long
        response_format: { type: 'json_object' }
      });

      const content = completion.choices[0].message.content;
      if (!content) {
        console.error('[DynamicTemplate] ‚ùå Pas de contenu dans la r√©ponse OpenAI');
        throw new Error('No response from OpenAI');
      }

      console.log('[DynamicTemplate] üì• R√©ponse brute OpenAI (premiers 500 chars):', content.substring(0, 500));

      let templateData;
      try {
        templateData = JSON.parse(content);
      } catch (parseError: any) {
        console.error('[DynamicTemplate] ‚ùå Erreur de parsing JSON:', parseError.message);
        console.error('[DynamicTemplate] Contenu re√ßu:', content);
        throw new Error(`Erreur de parsing JSON: ${parseError.message}`);
      }

      console.log('[DynamicTemplate] üìÑ Template pars√© avec succ√®s');
      console.log('[DynamicTemplate] ID:', templateData.id);
      console.log('[DynamicTemplate] Nombre de requiredFields:', templateData.requiredFields?.length || 0);
      console.log('[DynamicTemplate] Nombre de contentBlocks:', templateData.contentBlocks?.length || 0);

      // VALIDATION: V√©rifier qu'il n'y a pas de placeholders interdits
      const contentStr = JSON.stringify(templateData.contentBlocks);
      const forbiddenPatterns = [
        '[OBJET]',
        '[CONTENU_PRINCIPAL]',
        '[CONTENU]',
        '{{objet}}',
        '{{contenu_principal}}',
        '{{contenu_courrier}}',
        '{{contenu}}'
      ];

      const foundForbidden = forbiddenPatterns.filter(pattern =>
        contentStr.includes(pattern)
      );

      if (foundForbidden.length > 0) {
        console.error('[DynamicTemplate] ‚ö†Ô∏è Placeholders interdits d√©tect√©s:', foundForbidden);
        console.error('[DynamicTemplate] ContentBlocks probl√©matiques:', contentStr);

        // Au lieu de throw, essayer de r√©g√©n√©rer avec temp√©rature plus √©lev√©e
        console.warn('[DynamicTemplate] üîÑ Tentative de r√©g√©n√©ration avec instructions renforc√©es...');

        const retryCompletion = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: systemPrompt + '\n\nüö® CRITIQUE: Tu as g√©n√©r√© des placeholders [OBJET] ou {{objet}}. C\'est INTERDIT. √âcris le contenu COMPLET en toutes lettres!'
            },
            {
              role: 'user',
              content: userPrompt + '\n\n‚ö†Ô∏è ATTENTION: Ta r√©ponse pr√©c√©dente contenait des placeholders interdits. R√âESSAYE en √©crivant le contenu COMPLET cette fois!'
            }
          ],
          temperature: 1.0, // Maximum de cr√©ativit√©
          max_tokens: 3000,
          response_format: { type: 'json_object' }
        });

        const retryContent = retryCompletion.choices[0].message.content;
        if (!retryContent) {
          console.error('[DynamicTemplate] R√©g√©n√©ration √©chou√©e, utilisation fallback');
          throw new Error('R√©g√©n√©ration √©chou√©e');
        }

        templateData = JSON.parse(retryContent);
        console.log('[DynamicTemplate] ‚úÖ Template r√©g√©n√©r√© avec succ√®s');

        // Rev√©rifier
        const retryContentStr = JSON.stringify(templateData.contentBlocks);
        const retryForbidden = forbiddenPatterns.filter(pattern =>
          retryContentStr.includes(pattern)
        );

        if (retryForbidden.length > 0) {
          console.error('[DynamicTemplate] ‚ùå M√™me apr√®s r√©g√©n√©ration, placeholders pr√©sents');
          throw new Error('Impossible de g√©n√©rer template sans placeholders');
        }
      }

      // Validation des champs interdits dans requiredFields
      const forbiddenFields = ['objet', 'contenu', 'contenu_principal', 'contenu_courrier'];
      const invalidFields = templateData.requiredFields?.filter((field: any) =>
        forbiddenFields.includes(field.key.toLowerCase())
      );

      if (invalidFields && invalidFields.length > 0) {
        console.error('[DynamicTemplate] ‚ö†Ô∏è Champs interdits d√©tect√©s:', invalidFields.map((f: any) => f.key));
        // Filtrer ces champs automatiquement
        templateData.requiredFields = templateData.requiredFields.filter((field: any) =>
          !forbiddenFields.includes(field.key.toLowerCase())
        );
      }

      // Enrichir avec des m√©tadonn√©es
      const template: DocumentTemplate = {
        ...templateData,
        id: templateData.id || `dynamic-${Date.now()}`,
        metadata: {
          ...templateData.metadata,
          version: '1.0.0',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          author: 'Aurore Finance AI',
          dynamicallyGenerated: true
        }
      };

      console.log('[DynamicTemplate] ‚úÖ Template valid√© et g√©n√©r√©:', template.id);
      console.log('[DynamicTemplate] Champs requis:', template.requiredFields.map(f => f.key).join(', '));
      console.log('[DynamicTemplate] üìù Premier contentBlock:', template.contentBlocks[0]);
      console.log('[DynamicTemplate] üìù Contenu complet:', template.contentBlocks.map((b: any, i: number) =>
        `  [${i}] ${b.type}: ${b.content?.substring(0, 100)}${b.content?.length > 100 ? '...' : ''}`
      ).join('\n'));
      return template;

    } catch (error: any) {
      console.error('[DynamicTemplate] ‚ùå ERREUR lors de la g√©n√©ration:', error);
      console.error('[DynamicTemplate] Type d\'erreur:', error.constructor.name);
      console.error('[DynamicTemplate] Message:', error.message);
      console.error('[DynamicTemplate] Stack:', error.stack);

      // Si c'est une erreur OpenAI, logger plus de d√©tails
      if (error.response) {
        console.error('[DynamicTemplate] OpenAI Response Status:', error.response.status);
        console.error('[DynamicTemplate] OpenAI Response Data:', error.response.data);
      }

      // Ne pas throw, retourner le fallback √† la place
      console.warn('[DynamicTemplate] Utilisation du fallback template...');
      return this.generateFallbackTemplate(userInput);
    }
  }

  /**
   * G√©n√®re un template simple pour les cas non reconnus
   * DEPRECATED: Ne devrait jamais √™tre utilis√© car l'IA g√©n√®re toujours un template complet
   */
  static generateFallbackTemplate(userInput: string): DocumentTemplate {
    console.error('[DynamicTemplate] üö® FALLBACK TEMPLATE UTILIS√â - L\'IA OpenAI a √©chou√©!');
    console.error('[DynamicTemplate] Demande utilisateur:', userInput);
    const templateId = `fallback-${Date.now()}`;

    // G√©n√©rer un contenu de base √† partir de la demande utilisateur
    const cleanedInput = userInput.trim();

    return {
      id: templateId,
      type: 'courrier_formel',
      category: 'administrative',
      title: 'Courrier formel',
      description: `Document g√©n√©r√© pour: ${cleanedInput.substring(0, 100)}`,

      requiredFields: [
        {
          key: 'prenom',
          label: 'Pr√©nom',
          type: 'text',
          required: true,
          source: 'manual_input'
        },
        {
          key: 'nom',
          label: 'Nom',
          type: 'text',
          required: true,
          source: 'manual_input'
        },
        {
          key: 'adresse',
          label: 'Adresse compl√®te',
          type: 'address',
          required: true,
          source: 'manual_input'
        },
        {
          key: 'npa',
          label: 'Code postal',
          type: 'postal_code',
          required: true,
          source: 'manual_input'
        },
        {
          key: 'ville',
          label: 'Ville',
          type: 'text',
          required: true,
          source: 'manual_input'
        },
        {
          key: 'destinataire_nom',
          label: 'Nom du destinataire',
          type: 'text',
          required: true,
          source: 'manual_input',
          placeholder: 'Nom de l\'entreprise ou de la personne'
        },
        {
          key: 'destinataire_adresse',
          label: 'Adresse du destinataire',
          type: 'address',
          required: true,
          source: 'manual_input'
        }
      ],

      contentBlocks: [
        {
          type: 'address',
          content: '{{prenom}} {{nom}}\n{{adresse}}\n{{npa}} {{ville}}',
          style: { align: 'left' }
        },
        {
          type: 'address',
          content: '{{destinataire_nom}}\n{{destinataire_adresse}}',
          style: { align: 'right' }
        },
        {
          type: 'paragraph',
          content: '{{ville}}, le {{date_envoi}}',
          style: { align: 'right' }
        },
        {
          type: 'header',
          content: `Objet: ${cleanedInput.substring(0, 80)}`,
          style: { bold: true }
        },
        {
          type: 'paragraph',
          content: 'Madame, Monsieur,'
        },
        {
          type: 'paragraph',
          content: `Par la pr√©sente, je me permets de vous contacter concernant la demande suivante : ${cleanedInput}`
        },
        {
          type: 'paragraph',
          content: 'Je vous remercie de bien vouloir traiter cette demande dans les meilleurs d√©lais et reste √† votre disposition pour tout renseignement compl√©mentaire.'
        },
        {
          type: 'paragraph',
          content: 'Je vous prie d\'agr√©er, Madame, Monsieur, l\'expression de mes salutations distingu√©es.'
        },
        {
          type: 'signature',
          content: '{{prenom}} {{nom}}\n\n_________________________\nSignature'
        }
      ],

      metadata: {
        language: 'fr',
        legalCompliance: false,
        version: '1.0.0',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        author: 'Aurore Finance Fallback',
        dynamicallyGenerated: true
      }
    };
  }
}
